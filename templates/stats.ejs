<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Magium</title>
        <link rel="stylesheet" href="/styles/main2.css">
        <link rel="stylesheet" href="/styles/stats.css">
        <link rel="icon" href="/images/magium.ico" type="image/x-icon">
        <script src="https://unpkg.com/htmx.org@2.0.2"></script>
        <script src="/scripts/utils.js"></script>
        <script>
            // Check if some of the stats are undefined.
            // If they are, update every stat cookie with the default value 0, and reload the page.

            // This can be moved to a global variable later on, but recommendation would be to keep this in frontend
            var stats_variables = ["v_available_points", "v_strength", "v_toughness", "v_agility", "v_reflexes",
                "v_hearing", "v_perception", "v_ancient_languages", "v_combat_technique", "v_premonition",
                "v_bluff", "v_magical_sense", "v_aura_hardening", "v_magical_power", "v_magical_knowledge",
                "v_max_stat"]
            
            var locals = <%- JSON.stringify(locals) %>;

            document.addEventListener('DOMContentLoaded', function() {
                var stats_missing = stats_variables.some(function(stat) {
                    var value = locals[stat];
                    return value === null || value === undefined;
                });

                if (stats_missing) {
                    stats_variables.forEach(function(stat) {
                        if (stat == 'v_max_stat') {
                            document.cookie = stat + "=3";
                        } else {
                            document.cookie = stat + "=0";
                        }
                    });
                    window.location.reload();
                }
            })
        </script>
        <script>
            // Logic for updating stats

            // Define temporary global variables for the stats
            // Can also later set up two-way binding directly with the HTML elements using Object.defineProperty
            function getAuxiliaryStats() {
                // The following code is a more flexible version. It can be used if deemed more appropriate.
                // TODO: Have a discussion on whether this may be the better approach
                // function initializeAuxiliaryProperty(stat_property) {
                //     var stat_value = locals[stat_property] ? locals[stat_property] : default_value;
                //     return stat_value;
                // }
                // var stats_aux = {}
                // for (stat of stats_variables) {
                //     stats_aux[stat + "_aux"] = initializeAuxiliaryProperty(stat);
                // }
                // delete stats_aux["v_max_stat_aux"];
                var stats_aux = {
                    "v_available_points_aux": locals.v_available_points ? locals.v_available_points : 0,
                    "v_strength_aux": locals.v_strength ? locals.v_strength : 0,
                    "v_toughness_aux": locals.v_toughness ? locals.v_toughness : 0,
                    "v_agility_aux": locals.v_agility ? locals.v_agility : 0,
                    "v_reflexes_aux": locals.v_reflexes ? locals.v_reflexes : 0,
                    "v_hearing_aux": locals.v_hearing ? locals.v_hearing : 0,
                    "v_perception_aux": locals.v_perception ? locals.v_perception : 0,
                    "v_ancient_languages_aux": locals.v_ancient_languages ? locals.v_ancient_languages : 0,
                    "v_combat_technique_aux": locals.v_combat_technique ? locals.v_combat_technique : 0,
                    "v_premonition_aux": locals.v_premonition ? locals.v_premonition : 0,
                    "v_bluff_aux": locals.v_bluff ? locals.v_bluff : 0,
                    "v_magical_sense_aux": locals.v_magical_sense ? locals.v_magical_sense : 0,
                    "v_aura_hardening_aux": locals.v_aura_hardening ? locals.v_aura_hardening : 0,
                    "v_magical_power_aux": locals.v_magical_power ? locals.v_magical_power : 0,
                    "v_magical_knowledge_aux": locals.v_magical_knowledge ? locals.v_magical_knowledge : 0,
                }
                return stats_aux;
            }

            // This function is called on page load to initialize the stats
            // As well as to update when Cancel Changes is clicked
            // Unlike getAuxiliaryStats, this function is implemented in a flexible manner, instead of hard-coding
            //  For example: notice the calculation of stat, stat_value, stat_field_id, stat_value_span_id
            // TODO: Have a discussion on whether this may be too flexible and if it is better to hard-code the stats
            function initializeStats(stats_aux) {
                for (var stat_aux in stats_aux) {
                    var stat = stat_aux.split("_aux")[0];
                    var stat_value = stats_aux[stat_aux];
                    var stat_field_id = stat.split("v_")[1];
                    var stat_value_span_id = stat_field_id + "_value";
                    document.getElementById(stat_value_span_id).innerHTML = stat_value;
                    document.getElementById(stat_field_id).className = "stat-field" + 
                        (stat === "v_available_points" ? " available" : "");
                }
            }

            var stats_aux = getAuxiliaryStats();
            initializeStats(stats_aux);

            function updateStat(stat, stat_aux_key, stat_field_id, stat_field_value_id) {
                var stat_aux_value = stats_aux[stat_aux_key];

                if (stat_aux_value >= stat_max) { return; }
                stats_aux[stat_aux_key] += 1;
                stats_aux["v_available_points_aux"] -= 1;
                document.getElementById("available_points_value").innerHTML = stats_aux["v_available_points_aux"];
                document.getElementById(element_id).innerHTML = stats_aux[stat_aux_key];
                document.getElementById(element_id).className = "stat-field updated";
            }
        </script>
      </head>
      <body>
        <main id="main">
            <div class="header" style="justify-content: center;">
              <h2>STATS</h2>
            </div>
            <div class="content">
                <div class="stats-container">
                    <button class="stat-field" id="magical_power" onclick="void(0)" 
                    style="grid-column: 1; grid-row: 1;">
                    <!-- This initial content is tied to the EJS variable only once.
                    Later, the content for each of the stat-field is tied to the auxiliary variables -->
                        Magical Power: 
                        <span id="magical_power_value">
                            <% if (locals.v_magical_power) { %> <%= v_magical_power %> <% } else {%> 0 <% } %>
                        </span>
                    </button>

                    <button class="stat-field" id="magical_knowledge" onclick="void(0)" 
                    style="grid-column: 2; grid-row: 1;">
                        Magical Knowledge: 
                        <span id="magical_knowledge_value">
                            <% if (locals.v_magical_knowledge) { %> <%= v_magical_knowledge %> <% } else {%> 0 <% } %>
                        </span>
                    </button>

                    <button class="stat-field available" id="available_points" onclick="void(0)" 
                    style="grid-column: 1 / span 2; grid-row: 2;">
                        Available Points: 
                        <span id="available_points_value">
                        <% if (locals.v_available_points) { %> <%= v_available_points %> <% } else {%> 0 <% } %>
                        </span>
                    </button>

                    <button class="stat-field" id="strength" onclick="void(0)" 
                    style="grid-column: 1; grid-row: 3;">
                        Strength: 
                        <span id="strength_value">
                        <% if (locals.v_strength) { %> <%= v_strength %> <% } else {%> 0 <% } %>
                        </span>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="toughness" onclick="void(0)" 
                    style="grid-column: 1; grid-row: 4;">
                        Toughness: 
                        <% if (locals.v_toughness) { %> <%= v_toughness %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>

                    <button class="stat-field" id="agility" onclick="void(0)" 
                    style="grid-column: 2; grid-row: 3;">
                        Speed: 
                        <% if (locals.v_agility) { %> <%= v_agility %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="reflexes" onclick="void(0)" 
                    style="grid-column: 2; grid-row: 4;">
                        Reflexes: 
                        <% if (locals.v_reflexes) { %> <%= v_reflexes %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="hearing" onclick="void(0)" 
                    style="grid-column: 1; grid-row: 5;">
                        Hearing:
                        <% if (locals.v_hearing) { %> <%= v_hearing %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="perception" onclick="void(0)" 
                    style="grid-column: 2; grid-row: 5;">
                        Observation:
                        <% if (locals.v_perception) { %> <%= v_perception %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="ancient_languages" onclick="void(0)" 
                    style="grid-column: 1 / span 2; grid-row: 6;">
                        Ancient Languages: 
                        <% if (locals.v_ancient_languages) { %> <%= v_ancient_languages %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="combat_technique" onclick="void(0)" 
                    style="grid-column: 1 / span 2; grid-row: 7;">
                        Combat Technique: 
                        <% if (locals.v_combat_technique) { %> <%= v_combat_technique %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="premonition" onclick="void(0)" 
                    style="grid-column: 1 / span 2; grid-row: 8;">
                        Premonition: 
                        <% if (locals.v_premonition) { %> <%= v_premonition %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="bluff" onclick="void(0)" 
                    style="grid-column: 1 / span 2; grid-row: 9;">
                        Bluff (Aura Concealment):
                        <% if (locals.v_bluff) { %> <%= v_bluff %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="magical_sense" onclick="void(0)" 
                    style="grid-column: 1; grid-row: 10;">
                        Magical Sense:
                        <% if (locals.v_magical_sense) { %> <%= v_magical_sense %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>

                    <button class="stat-field" id="aura_hardening" onclick="void(0)" 
                    style="grid-column: 2; grid-row: 10;">
                        Aura Hardening:
                        <% if (locals.v_aura_hardening) { %> <%= v_aura_hardening %> <% } else {%> 0 <% } %>
                        /
                        <% if (locals.v_max_stat) { %> <%= v_max_stat %> <% } else {%> 3 <% } %>
                    </button>
                </div>
                <div id="stats-button-container">
                <button onclick="void(0)" id="cancel-changes">Cancel Changes</button>
                <button onclick="void(0)" id="confirm-changes">Confirm Changes</button>
                <button onclick="navigateTo('/')" id="return-to-game">Return to game</button>
                </div>
            </div>
            <div class="footer">
              <button class="footer-button" onclick="toggleTheme()">Activate Night Mode</button>
              <p>Magium v0.1</p>
            </div>
        </main>
        <!-- <script src="main.js"></script> -->
      </body>
</html>